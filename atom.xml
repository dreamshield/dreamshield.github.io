<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eric的技术咖啡屋</title>
  <icon>https://www.gravatar.com/avatar/8e7764432bd2e4402b45b1dcc09c40ec</icon>
  
  <link href="https://techcoffe.com/atom.xml" rel="self"/>
  
  <link href="https://techcoffe.com/"/>
  <updated>2024-10-10T06:31:13.709Z</updated>
  <id>https://techcoffe.com/</id>
  
  <author>
    <name>EricZhang</name>
    <email>zhpf@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式之工厂模式</title>
    <link href="https://techcoffe.com/2024/06/25/Design-Pattern-of-Factory/"/>
    <id>https://techcoffe.com/2024/06/25/Design-Pattern-of-Factory/</id>
    <published>2024-06-25T08:23:42.000Z</published>
    <updated>2024-10-10T06:31:13.709Z</updated>
    
    <content type="html"><![CDATA[<p>工厂模式是创建型模式的一种。通过提供创建对象的接口，而不是直接创建对象实例，使得代码更具扩展性和灵活性。根据对象创建的不同场景，工厂模式可以分为三类：简单工厂模式、工厂方法模式和抽象工厂模式。</p><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>简单工厂模式通过一个单一的工厂类，根据不同参数，创建并返回不同的实例对象。通过简单工厂模式，可以将对象的创建逻辑封装起来，提供统一的接口给客户端使用，简化了客户端的代码复杂度，提高了代码的可维护性。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>需要创建的对象较少<blockquote><p>当需要创建的对象较少时，可以考虑使用简单工厂模式来管理对象的创建过程。</p></blockquote></li><li>对象的创建逻辑复杂<blockquote><p>将对象的创建逻辑集中在一个工厂类中，可以简化客户端的代码，提高代码的可维护性。</p></blockquote></li><li>不需要延迟创建对象<blockquote><p>对象创建的逻辑在一个具体的工厂类中实现，对象的创建过程不需要延迟到子类中。</p></blockquote><span id="more"></span></li></ul><h3 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h3><img  src=http://www.plantuml.com/plantuml/svg/ZL5DIWCn5Dw_KxnbYsGEK4f12e8RAzWBnFIr1AP9ITueGok8UtNb0Lm8hjowyJgZrp0TadJQJPjL-FBzlHTWpINXtzTZy_pMV7yqBq-_d-_Dpok0DankBXNXvRMpiqenhW73ESCRTjeiqAz8wNdTw-_32-8hkQGCtrazGn_19Et30u2yzUnaC3wFb_qWaHnDK6xvkSXmKnI78ZWq6Mw4mB4roX5J12U6Jk9Dxos0AgNtU16erjLv-5mwjmb2sKt8an-XXf1UkuSK8SHeHnr4SkenBZMPtH-qMrNM-6gP_D9okLvHwnibHJ7AKmomyjHzwEHjN_u1><p>以上图中各个角色的类说明如下表：</p><table><thead><tr><th><strong>角色</strong></th><th><strong>功能说明</strong></th></tr></thead><tbody><tr><td>产品接口：IProduct</td><td>定义了具体产品需要实现的基本功能与规则约束</td></tr><tr><td>抽象产品：AbstractProduct</td><td>实现了各个产品类需要实现的通用功能与约束</td></tr><tr><td>具体产品：ConcreteProductX</td><td>根据各个具体类自身的不同特点，扩展抽象产品并实现标准产品接口</td></tr><tr><td>工厂：Factory</td><td>提供生产具体产品的工厂接口</td></tr><tr><td>客户端：Client</td><td>使用工厂类提供的接口，根据不同的参数获取对应的实例对象。</td></tr></tbody></table><blockquote><p>注<sup>1</sup>：在实际开发中，Product不一定会有以上UML图中抽象的层次那么深，需要根据实际场景进行考量。比如：直接实现具体产品类并没有AbstractProduct。<br>注<sup>2</sup>：Factory中定义的接口返回值不要返回具体类，要是使用标准的产品接口，遵循LSP原则。</p></blockquote><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p>下面通过<code>mysql-connector-java:8.0.33</code>中获取ConnectionUrl的源码对简单工厂模式的具体实例进行分析。</p><ul><li>实例UML图</li></ul><img  src=http://www.plantuml.com/plantuml/svg/ZP0nYW9H38Rxd2Ab8kC1L6mS5cnMK3n0V6J71qC6yh8sAeYjQ6ThPpkjdQVPmMlui794MDFc-_wV1CnRpdWhDzN-M5tErM5RbQU_wmx0Yx7-a6DCoMX6WQUQ3menyiAAIy0uBPoOUiamOtl26iqkh05e5ap96KPDs9al92u_KjzszbRjTZqBwiczLPBW5_cyMB1-3AOI9hhu5n_P_17gb8s74ep4CRoGIT9_kRQ3KI2Bv7SXOyvyY7-DTwVgO_TRuJSmt040><ul><li>代码具体实现</li></ul><p>为了实现与MySQL进行连接，NonRegisteringDriver通过connect方法获取java.sql.Connection实例。在该方法中，通过ConnectionUlr提供的getConnectionUrlInstance接口，获取到具体的ConnectionUrl实例。如：SingleConnectionUrl、FailoverConnectionUrl、LoadBlanceConnectionUrl等9个具体实例。客户端调用工厂类获取具体实例的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> java.sql.Connection <span class="title function_">connect</span><span class="params">(String url, Properties info)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!ConnectionUrl.acceptsUrl(url)) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * According to JDBC spec:</span></span><br><span class="line"><span class="comment">             * The driver should return &quot;null&quot; if it realizes it is the wrong kind of driver to connect to the given URL. This will be common, as when the</span></span><br><span class="line"><span class="comment">             * JDBC driver manager is asked to connect to a given URL it passes the URL to each loaded driver in turn.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通过简单工厂模式，根据url，info获取具体ConnectionUrl实例</span></span><br><span class="line">        <span class="type">ConnectionUrl</span> <span class="variable">conStr</span> <span class="operator">=</span> ConnectionUrl.getConnectionUrlInstance(url, info);</span><br><span class="line">        <span class="comment">// 后续通过ConnectionUrl构建并获取不同的java.sql.Connection实例</span></span><br><span class="line">        <span class="comment">// 其它内容省略</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedConnectionStringException e) &#123;</span><br><span class="line">        <span class="comment">// When Connector/J can&#x27;t handle this connection string the Driver must return null.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CJException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ExceptionFactory.createException(UnableToConnectException.class,</span><br><span class="line">                Messages.getString(<span class="string">&quot;NonRegisteringDriver.17&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; ex.toString() &#125;), ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>com.mysql.cj.conf.ConnectionUrl#getConnectionUrlInstance</code>方法中，实现了根据不同connString与info实例化ConnectionUrl的封装。具体实现中，根据不同的key将不同类型的ConnectionUrl缓存在本地。由于本地缓存使用非线程安全的LRUCache，为了提高性能实现了基于双检查锁的加锁逻辑。具体实现如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ConnectionUrl <span class="title function_">getConnectionUrlInstance</span><span class="params">(String connString, Properties info)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (connString == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ExceptionFactory.createException(WrongArgumentException.class, Messages.getString(<span class="string">&quot;ConnectionString.0&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">connStringCacheKey</span> <span class="operator">=</span> buildConnectionStringCacheKey(connString, info);</span><br><span class="line">    ConnectionUrl connectionUrl;</span><br><span class="line">    rwLock.readLock().lock();</span><br><span class="line">    connectionUrl = connectionUrlCache.get(connStringCacheKey);</span><br><span class="line">    <span class="keyword">if</span> (connectionUrl == <span class="literal">null</span>) &#123;</span><br><span class="line">        rwLock.readLock().unlock();</span><br><span class="line">        rwLock.writeLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Check again, in the meantime it could have been cached by another thread.</span></span><br><span class="line">            connectionUrl = connectionUrlCache.get(connStringCacheKey);</span><br><span class="line">            <span class="keyword">if</span> (connectionUrl == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">ConnectionUrlParser</span> <span class="variable">connStrParser</span> <span class="operator">=</span> ConnectionUrlParser.parseConnectionString(connString);</span><br><span class="line">                <span class="comment">// 实例化并返回具体实例</span></span><br><span class="line">                connectionUrl = Type.getConnectionUrlInstance(connStrParser, info);</span><br><span class="line">                connectionUrlCache.put(connStringCacheKey, connectionUrl);</span><br><span class="line">            &#125;</span><br><span class="line">            rwLock.readLock().lock();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            rwLock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rwLock.readLock().unlock();</span><br><span class="line">    <span class="keyword">return</span> connectionUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>工厂方法模式定义了一个用于创建对象的接口，但让子类决定实例化哪一个类，使一个类的实例化延迟到子类。父类决定实例的生成方式，但并不决定所要生成的具体类，具体的处理全部交给子类负责。这样就将实例生成框架和实际负责生成实例的类进行了解耦。</p><h3 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>需要创建的对象具有复杂的创建过程<blockquote><p>如果一个对象的创建过程比较复杂，包含多个步骤，且这些步骤可以被定制或者扩展，那么使用工厂方法模式可以将复杂的创建过程封装在工厂方法中。该场景多数情况下，还会用到模板方法模式。</p></blockquote></li><li>代码需要与具体类解耦<blockquote><p>当代码中需要使用一些具体类的实例时，直接依赖这些具体类会使得代码变得脆弱，难以维护和扩展。工厂方法模式通过使用抽象类或者接口来定义创建对象的方法，可以将代码与具体类解耦。</p></blockquote></li><li>需要在实例化时进行一些额外的操作<blockquote><p>有时候在创建对象时需要进行一些额外的操作，比如设置默认值、进行依赖注入、执行一些初始化逻辑等。这些操作可以在工厂方法中进行，从而避免在每个使用对象的地方重复这些操作。</p></blockquote></li><li>需要通过子类来选择需要创建的对象<blockquote><p>如果系统中有多个子类，客户端需要根据不同的条件创建不同的子类实例，那么可以将创建对象的职责下放到子类中，通过子类来决定具体实例化哪个类。</p></blockquote></li><li>需要创建产品对象的家族，且这些对象之间具有一定的关系<blockquote><p>当需要创建一组相关的对象时，可以使用工厂方法模式来定义一个创建这些对象的接口，不同的子类实现该接口来创建具体的对象，从而保证这些对象之间的一致性和互操作性。</p></blockquote></li></ul><h3 id="UML图-1"><a href="#UML图-1" class="headerlink" title="UML图"></a>UML图</h3><img  src=http://www.plantuml.com/plantuml/svg/ZL3DIWCn6BpdAG9UjcWMz2Yb80MX1tz0No1clxQ1Dbcotoh5Ul41zAHt3u9t3oBuEhlFORgRncwwNGmiMIOptpSpA746jFXwBvuUozVlylEb_7WhVfu9aGh1ZBa0EheqEia5qdj2xTcdLsYacj0i1I77YwZNX2U0vtmE7hxLCg6P0zVI7daWXDzaQBWTVE9-celOUgAooXNV6-alupWKaN18VyaO7Meb320uy4B1ltZNTxh5tgdzj5du7hmVA-LU6wNSyFdX0Qtkexg6lRg6r6W1IMxW372g4sidwdgtDgAggT11mxC3DxDryQfi8P6nmL-SOnU8R6-eYDkbxfJOPMsI5UmbP3YJe936yQ0ba-Nb6NHmwba1PoEBVVa5><p>以上图中各角色的类说明如下表：</p><table><thead><tr><th><strong>角色</strong></th><th><strong>功能说明</strong></th></tr></thead><tbody><tr><td>产品接口：IProduct</td><td>定义了具体产品需要实现的基本功能与规则约束</td></tr><tr><td>抽象产品：AbstractProduct</td><td>实现了各个产品类需要实现的通用功能与约束</td></tr><tr><td>具体产品：ConcreteProductX</td><td>根据各个具体类自身的不同特点，扩展抽象产品并实现标准产品接口</td></tr><tr><td>抽象工厂：AbstractFactory</td><td>定义了IProduct的生产流程，具体的实现细节由子类去实现</td></tr><tr><td>具体工厂：ConcreateFactoryX</td><td>具体工厂实现抽象工厂定义的具体实现细节，生产具体的产品</td></tr><tr><td>客户端：Client</td><td>根据不同参数获取到具体工厂类，并通过工厂类方法生产指定的具体产品的实例对象。</td></tr></tbody></table><blockquote><p>注<sup>1</sup>：工厂方法模式可以在工厂实现时同时采用模版方法模式，目的是对复杂的产品创建过程进行约束。<br>注<sup>2</sup>：尽管Java中接口中支持通过default定义方法的默认实现，但这里的抽象工厂采用抽象类而没有使用接口，是因为Java接口中定义的方法只能为public，对于需要子类去实现的方法不能进行访问权限的限制。在客户端也可以对相应的方法进行访问。<br>注<sup>3</sup>：在不需要约束产品流程时，抽象工厂也可以直接使用接口定义。</p></blockquote><h3 id="实例分析-1"><a href="#实例分析-1" class="headerlink" title="实例分析"></a>实例分析</h3><p>下面通过<code>org.slf4j.LoggerFactory</code>中获取Logger的源码对工厂方法模式的具体实例进行分析。</p><ul><li>实例UML图</li></ul><img  src=http://www.plantuml.com/plantuml/svg/XL6xJWCn4Epz5Li6eLn55L2AH20XGK0AF-2xsrmCZYtP2-BPq2BHGKb7IqE1QFWQBjyHNyuazx22AsjdPcTsbv4WYP1_lUVFZ_FNx_ddI_xnzllpn9XGX6R24uIndEoSHqSwoz307GFtjc5CHgWCCgGHds5dQzVNOwqbSWN2dXadtbSybfYkyIijKg02wlWMCvlLKKrJDCT8KvtQGlZ0M2t2tdqKWViFU7BXQm52MHcTd7f6UwB34ZdW2MbpivhCDt6JbR-_dChDMKtJa0TI3RLplAOD_4P8ZxKSbe9kjry_HGyIWvoGiQ3jKb17rfAmSSLZ1LLi4icjhMLexex7jhWjRLvYyw9jzyQkUd1fyHz9A-r0t4P3AL1HY5Kqh3BwmRbAtW80><ul><li>代码具体实现</li></ul><p>客户端代码值依赖Slf4j包定义的Logger和LogFactory，避免了直接依赖具体的日志实现(如：LogBack)。这样在需要进行日志替换时，只需要变更相应配置即可，业务代码不需要进行改变。在ILoggerFactory接口中定义了日志生产的方法，具体的日志生产延迟到具体的日志工厂中。这些具体工厂在不同的日志框架中实现。在<code>org.slf4j.LoggerFactory#getLogger(java.lang.String)</code>方法中获取ILoggerFactory实例，根据具体的ILoggerFactory获取Logger实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Logger <span class="title function_">getLogger</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="type">ILoggerFactory</span> <span class="variable">iLoggerFactory</span> <span class="operator">=</span> getILoggerFactory();</span><br><span class="line">    <span class="keyword">return</span> iLoggerFactory.getLogger(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>抽象工厂提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。这种模式有助于提高代码的灵活性和可扩展性，同时也使代码更易于维护和测试。</p><h3 id="适用场景-2"><a href="#适用场景-2" class="headerlink" title="适用场景"></a>适用场景</h3><p>一组相关或依赖对象一起使用，同一个工厂可以同时创建多个产品族产品实例。举个例子：我们要生产一辆汽车，这就需要发动机、轮胎、车架、车机等产品。这些产品都是相关的一族产品。</p><h3 id="UML图-2"><a href="#UML图-2" class="headerlink" title="UML图"></a>UML图</h3><img  src=http://www.plantuml.com/plantuml/svg/K-3YAiaioKbLUDQrzyN6XK-tBttQr_HinSAdU_gvk3BpIbABqXAJKnKy0uhoKqgJInmLghaKW41ReIm_CqKXDxKa8pz5GzEQgnQRQYSygX4csjJewIauv-Sb5wMMfC94_VDI2Ia9ASz76EE4LOqJiZ4ub82DGNAxMs9oINvH9Tpf25S0jIKYh0Vv0rM54weA9vXFOIQYM0yL13iGdmA8Bs4gT7Nja1na1RKGkxmJGfuBqrQmKYoXZj14d1ud53rScAx7QX5879T5EFGuXOJd8rkKavcQLuAY4CcXLWgbnQbur43iHrE37B0uf9oWKW00><p>以上图中各角色的类说明如下表：</p><table><thead><tr><th><strong>角色</strong></th><th><strong>功能说明</strong></th></tr></thead><tbody><tr><td>产品接口：IProductA、IProductB</td><td>定义不同产品族需要实现的基本功能与规则约束</td></tr><tr><td>具体产品：IProductA-X、IProductB-X</td><td>不同产品的具体实现实例</td></tr><tr><td>工厂接口：IFactory</td><td>定义不同产品族的生产流程(IProductA、IProductB)，具体细节由子类实现</td></tr><tr><td>具体工厂：ConcreteFactoryX</td><td>工厂接口的具体实现，生产具体的产品实例</td></tr><tr><td>客户端</td><td>调用具体的工厂，获取相应的产品实例</td></tr></tbody></table><p>注<sup>1</sup>：抽象工厂模式与工厂方法模式的区别在于，抽象工厂模式提供了不同产品族产品实例的生产，工厂方法模式用于同一产品族不同实例的生产。</p><h3 id="实例分析-2"><a href="#实例分析-2" class="headerlink" title="实例分析"></a>实例分析</h3><p>在实际应用中，抽象工厂模式比较典型的实现是java.sql包中的Connection等相关接口的定义和实现。在该包中定义了Statement、Blob、Clob、NClod、SQLX等一批接口。这一批接口可以理解为不同的抽象产品族。Connnection接口为抽象工厂类，在该接口中定义了生产Statement、Blob、Clob、NClod、SQLX等产品族产品的接口定义。不同的数据库驱动包分别定义了适用于自身数据库相关产品族实例的实现。</p><ul><li>实例UML图</li></ul><img  src=http://www.plantuml.com/plantuml/svg/uoh9BCb9LNZMjVV5neLFjozzsjVqRCN2ftlwdwwRzsHVDnSNLsPUIMfHMc9oge9NObbYS66EddD-NbvgSabcVfv2DPS246Wh10VwHFZwA2GNfIQMf48u6feA9Hb5-UN584dNYkJK0f0EQvY64g32tDIy4fWU61-NjbfiBe5QMys5Gnfk2KG55W_ewjgXcsO5TH91vN3JuJgmQR6fqTDJSCxFzQqiBinnpl9AIKf6alRCBSZXmZGHcoQuBAeUYAEnQG2p8V9SN7XT0FONFkiGNYJP72HN415G_aNf0Vd59Ub5gK1TOFq1wGWrk48Acowu4gn1XLK7DAZmkm7iHxmM8hn9hadeeUMKMQNdd9C9CXiv1I8PPQLGMfoAInsooq3A0000><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://book.douban.com/subject/26933281/">图解设计模式</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;工厂模式是创建型模式的一种。通过提供创建对象的接口，而不是直接创建对象实例，使得代码更具扩展性和灵活性。根据对象创建的不同场景，工厂模式可以分为三类：简单工厂模式、工厂方法模式和抽象工厂模式。&lt;/p&gt;
&lt;h2 id=&quot;简单工厂模式&quot;&gt;&lt;a href=&quot;#简单工厂模式&quot; class=&quot;headerlink&quot; title=&quot;简单工厂模式&quot;&gt;&lt;/a&gt;简单工厂模式&lt;/h2&gt;&lt;p&gt;简单工厂模式通过一个单一的工厂类，根据不同参数，创建并返回不同的实例对象。通过简单工厂模式，可以将对象的创建逻辑封装起来，提供统一的接口给客户端使用，简化了客户端的代码复杂度，提高了代码的可维护性。&lt;/p&gt;
&lt;h3 id=&quot;适用场景&quot;&gt;&lt;a href=&quot;#适用场景&quot; class=&quot;headerlink&quot; title=&quot;适用场景&quot;&gt;&lt;/a&gt;适用场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;需要创建的对象较少&lt;blockquote&gt;
&lt;p&gt;当需要创建的对象较少时，可以考虑使用简单工厂模式来管理对象的创建过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;对象的创建逻辑复杂&lt;blockquote&gt;
&lt;p&gt;将对象的创建逻辑集中在一个工厂类中，可以简化客户端的代码，提高代码的可维护性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;不需要延迟创建对象&lt;blockquote&gt;
&lt;p&gt;对象创建的逻辑在一个具体的工厂类中实现，对象的创建过程不需要延迟到子类中。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="设计模式" scheme="https://techcoffe.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
</feed>
